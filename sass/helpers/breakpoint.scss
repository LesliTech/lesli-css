/*
Lesli

Copyright (c) 2025, Lesli Technologies, S. A.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.

Lesli - SCSS Utilities for websites, apps and web applications

Made with ♥ by LesliTech
Building a better future, one line of code at a time.

@contact  hello@lesli.tech
@website  https://www.lesli.tech
@license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html

// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
// · 
*/


// · 
@use "sass:map";


// · Import default breakpoint sizes
@use "../variables";


// · 
@mixin lesli-breakpoint-small() {
    @include lesli-breakpoint-builder($max:small) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-mobile() {
    @include lesli-breakpoint-builder($max:mobile) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-tablet() {
    @include lesli-breakpoint-builder($min:tablet) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-desktop() {
    @include lesli-breakpoint-builder($min:desktop) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-widescreen() {
    @include lesli-breakpoint-builder($min:widescreen) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-fullhd() {
    @include lesli-breakpoint-builder($min:fullhd) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-until-tablet() {
    @include lesli-breakpoint-builder($max:tablet) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-until-desktop() {
    @include lesli-breakpoint-builder($max:desktop) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-until-widescreen() {
    @include lesli-breakpoint-builder($max:widescreen) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-until-fullhd() {
    @include lesli-breakpoint-builder($max:fullhd) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-only-mobile() {
    @include lesli-breakpoint-builder($min:mobile, $max:mobile) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-only-tablet() {
    @include lesli-breakpoint-builder($min:tablet, $max:tablet) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-only-desktop() {
    @include lesli-breakpoint-builder($min:desktop, $max:desktop) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-only-widescreen() {
    @include lesli-breakpoint-builder($min:widescreen, $max:widescreen) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-only-fullhd() {
    @include lesli-breakpoint-builder($min:fullhd, $max:fullhd) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint($min, $max:false) {
    @include lesli-breakpoint-builder($min, $max) {
        @content;
    }
}


// · 
@mixin lesli-breakpoint-builder($min:false, $max:false) {

    $min-width: false;
    $max-width: false;

    // Search for a default value for the min width from the requested named breakpoint
    @if map.has-key(variables.$breakpoints, $min) {
        $min-width: map.get(map.get(variables.$breakpoints, $min), min-width);
    } 

    // Search for a default value for the max width from the requested named breakpoint
    @if map.has-key(variables.$breakpoints, $max) {
        $max-width: map.get(map.get(variables.$breakpoints, $max), max-width);
    } 

    @if $min-width {
        $min: $min-width;
    }

    @if $max-width {
        $max: $max-width;
    }

    // 
    @if $min and not $max {
        @media only screen and (min-width: $min) { 
            @content;
        }
    }

    // 
    @if not $min and $max {
        @media only screen and (max-width: $max) { 
            @content;
        }
    }

    // 
    @if $min and $max {
        @media only screen and (min-width: $min) and (max-width: $max) { 
            @content;
        }
    }
}
